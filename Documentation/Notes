A data folder is needed for this to work, ELF is included in there
https://stackoverflow.com/questions/34960383/how-read-elf-header-in-c
http://www.skyfree.org/linux/references/ELF_Format.pdf


mmcpy
https://www.techonthenet.com/c_language/standard_library_functions/string_h/memcpy.php#:~:text=In%20the%20C%20Programming%20Language%2C%20the%20memcpy%20function,s1.%20It%20returns%20a%20pointer%20to%20the%20destination.
https://stackoverflow.com/questions/44944965/filling-of-a-structure-using-memcpy

mmcpy with offsets
https://cboard.cprogramming.com/c-programming/134799-memcpy-part-array-specific-position-different-array.html

It seems like fpic runs fine

Compile a shared library:
gcc -shared -o libhello.so -fPIC hello.c

Default Compiler Flags:
These are stored in idedate.json at the very bottom of the file.

Contents of lib_memory_Manager.ar
Even with a shared object file, ar can effectively store a shared object

Building an executable packer (CRUCIAL?):
https://fasterthanli.me/series/making-our-own-executable-packer/part-17

How a dynamic Linker works:
https://cseweb.ucsd.edu/~gbournou/CSE131/the_inside_story_on_shared_libraries_and_dynamic_loading.pdf

Making Tiny asm stuff

https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html
ELF Header Dissection:
https://0x00sec.org/t/dissecting-and-exploiting-elf-files/7267


Gcc tools for this platform directory:
C:\Users\cbent\.platformio\packages\toolchain-xtensa32\bin

gcc -c can make an object file with a single text section

Using pointers to functions:
https://www.cprogramming.com/tutorial/function-pointers.html

This is where my pointer to pointer code came from:
https://www.reddit.com/r/C_Programming/comments/63wyd7/converting_void_pointers_to_function_pointers/

IDK how the code works.

Explains typedef and how to make function pointers work:
http://www.cs.cmu.edu/~ab/15-123N09/lectures/Lecture%2008%20-%20Function%20Pointers.pdf


Information on using glibc to fill up an elf header data structure:
https://eklitzke.org/position-independent-executables

Update firmware from binaries on a spiffs image:
https://techtutorialsx.com/2019/07/21/esp32-arduino-updating-firmware-from-the-spiffs-file-system/

Tiny ELF:
https://static.lwn.net/images/conf/rtlws-2011/proc/Yong.pdf

Linker Scripting. May contain the final command for centralizing text, data etc. in order:
https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_chapter/ld_3.html

PlatformIO's more detailed linker info
https://docs.platformio.org/en/latest/projectconf/advanced_scripting.html


### Successfully Attaching a linker script to a library manifest:

This was placed at the end of Memory_manager_d's library build flags. The linker saw it but it messed every thing else up.


"-Wl,--script='C:\\Users\\cbent\\a.txt'"


### Dead code strip without LTO:

https://gcc.gnu.org/legacy-ml/gcc-help/2003-08/msg00128.html
-Wl,-static -fvtable-gc -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s
DEFAULT FLAGS:


 "-fno-rtti -fno-exceptions -std=gnu++11 -fpic -fpermissive -Os -Wall -nostdlib -Wpointer-arith -Wno-error=unused-but-set-variable -Wno-error=unused-variable -mlongcalls -ffunction-sections -fdata-sections -fstrict-volatile-bitfields -Wno-error=deprecated-declarations -Wno-error=unused-function -Wno-unused-parameter -Wno-sign-compare -fstack-protector -fexceptions -Werror=reorder"}

DEADCODESTRIP := -Wl,-static -fvtable-gc -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s

 -Wl,-static
Link against static libraries.  Required for dead-code elimination.

-fvtable-gc
C++ virtual method table instrumented with garbage collection information for the linker.

-fdata-sections
Keeps data in separate data sections, so they can be discarded if unused.

-ffunction-sections
Keeps funcitons in separate data sections, so they can be discarded if unused.

-Wl,--gc-sections
Tell the linker to garbage collect and discard unused sections.

-s
Strip the debug information, so as to make the code as small as possible.  (I presume that you'd want to do this in a dead-code removal build.)

The requirement to link against the static libraries was surprising to me.  But there you go.

HTH,
--Eljay

C:\Users\cbent\.platformio\platforms\espressif32\builder\fvtable-gc'

https://stackoverflow.com/questions/200292/process-for-reducing-the-size-of-an-executable

GCC 4.2.1 manual

LTO ar, nm etc

https://bugzilla.redhat.com/show_bug.cgi?id=1678826




11/9
added flto to the linker and to the 

board_build.ldscript = /path/to/ldscript.ld
Replaces the board scrip

All PIO variables available:
https://github.com/platformio/platformio-core/blob/develop/platformio/builder/main.py

CRUCIAL!!!!!!
You can link a script if you specify the library path first. Or at least you can make this compile
            "-Wl,--script="C:\\Users\\cbent\\a.txt""
            //"-Wl,-C:\Users\cbent\Dropbox",
            //"-Wl,-T a.txt"
            It doesn't like the one above this.


Contains actual code for loading an elf file to run:

http://thomasloven.com/blog/2013/08/Loading-Elf/

Recommended docs Elf File format
http://www.skyfree.org/linux/references/ELF_Format.pdf

    ...
    elf_phead *phead = (elf_phead)&data[elf->ph_offset];
    uint32_t i;
    for(i = 0; i < elf->ph_num; i++)
    {
        if(phead[i].type == ELF_PT_LOAD)
        {
            load_elf_segment(data, &phead[i]);
        }
    }
    return 0;
}
This would also

Esp 32 Loader  Tutorial
https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/api-guides/linker-script-generation.html

Esp32 Default linker script:
https://github.com/espressif/esp-idf/blob/451ce8a/components/esp_system/ld/esp32s2/sections.ld.in

INSTRUCTION ADDRESSING:

Internal execution RAM is located between       0x4008_0000 and    0x400A_0000
However, the executable address space runs from 0x4008_0000 to     0x407F_FFFF.
Note that the "7" is one place over from the "A" in 
That entire area is accessible by the cache and memory management unit.

Information on storing stack data out side of ROM:

CONFIG_SPIRAM_ALLOW_STACK_EXTERNAL_MEMORY
Allow external memory as an argument to xTaskCreateStatic

Found in: Component config > ESP32-specific > CONFIG_ESP32_SPIRAM_SUPPORT > SPI RAM config

https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/kconfig.html#config-spiram-allow-stack-external-memory


Because some bits of the ESP32 code environment cannot be recompiled with the cache workaround, normally tasks cannot be safely run with their stack residing in external memory; for this reason xTaskCreate (and related task creaton functions) always allocate stack in internal memory and xTaskCreateStatic will check if the memory passed to it is in internal memory. If you have a task that needs a large amount of stack and does not call on ROM code in any way (no direct calls, but also no Bluetooth/WiFi), you can try enable this to cause xTaskCreateStatic to allow tasks stack in external memory.

Default value:
No (disabled) if SPIRAM_USE_MALLOC && CONFIG_ESP32_SPIRAM_SUPPORT

CONFIG_SPIRAM_USE
SPI RAM access method

Found in: Component config > ESP32-specific > CONFIG_ESP32_SPIRAM_SUPPORT > SPI RAM config

The SPI RAM can be accessed in multiple methods: by just having it available as an unmanaged memory region in the CPU’s memory map, by integrating it in the heap as ‘special’ memory needing heap_caps_malloc to allocate, or by fully integrating it making malloc() also able to return SPI RAM pointers.

Available options:
Integrate RAM into memory map (SPIRAM_USE_MEMMAP)

Make RAM allocatable using heap_caps_malloc(…, MALLOC_CAP_SPIRAM) (SPIRAM_USE_CAPS_ALLOC)

Make RAM allocatable using malloc() as well (SPIRAM_USE_MALLOC)


#### This option has to do with avoiding the issue where using the flash cache blocks access to external ram.

https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/kconfig.html#config-spiram-cache-workaround

Put libc’s jump related functions in IRAM

Found in: Component config > ESP32-specific > CONFIG_ESP32_SPIRAM_SUPPORT > SPI RAM config > SPIRAM workaround libraries placement

The functions affected by this option are: longjmp and setjmp. Putting these function in IRAM will allow them to be called when flash cache is disabled but it will also reduce the available size of free IRAM for the user application.

Default value:
Yes (enabled) if CONFIG_SPIRAM_CACHE_WORKAROUND && CONFIG_ESP32_SPIRAM_SUPPORT



11/20 - 5 additional hours

FATAL ERRORS:

### Load_Store_Alignment:
32 bit load from 4 byte aligned address only, 16 from two etc. This probably means any load from 


### Load Prohibited or Store Prohibited:

If ExecV is zero a null ptr was probably used. If the address is ouside of 0x3fxx_xxxx and 0x6xxx_xxxx, the value is garbage


### Instr_Fetch_Prohibited:

CPU could not load this instruction because the instruction address is not in a valid region of instruction ram or ROM. Usually this is caused by attempting to call a function pointer which does not point to valid code. Program counter register register can usually be used as an indicator. It will either be zero ( from a null ptr or around zero due to a null ptr used with an offset addition), or a garbage value (not 0x4xxx_xxxx).



Setting memcopy etc. in IRAM so it can be run while flash cahe is disabled.

https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/kconfig.html#config-spiram-cache-libmem-in-iram


### How to Use External RAM for External Memory: (Actually this just mapped to internal flash ram)


You have to use a bitwise or ( "||" ) with the two types of memory you want, IRAM and external ram. 


heap_caps_malloc(1000, MALLOC_CAP_EXEC || MALLOC_CAP_SPIRAM);

https://gitea.edwinclement08.com/espressif/esp-idf/commit/a3a1cc080e225e3208c210076386152002b625fc

### How To configure ram for use in  a platform IO Project

You use build pla Configuring External RAM: N

-D CONFIG_SPIRAM_ALLOW_BSS_SEG_EXTERNAL_MEMORY


-D MALLOC_CAP_SPIRAM

### Configuring FLASH for 

https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/storage/spi_flash.html

Arduino Based library:
https://github.com/Marzogh/SPIMemory/blob/master/README.md

### Mapping External Flash to Address Space:

#include "esp_spi_flash.h"

  #Current Code (Located in Main):
      size_t src_address;
    size_t size;
    spi_flash_mmap_memory_t memory_type;
    const void **out_ptr; // points to the mapped memory region
    spi_flash_mmap_handle_t handle;
    // spi_flash_mmap(src_address, size, SPI_FLASH_MMAP_DATA, out_ptr, handle);
### C++ syntax for fp conversions:

https://en.cppreference.com/w/cpp/language/reinterpret_cast
See item #7's note on function pointer  conversions

    ### Good Example Code:

https://stackoverflow.com/questions/1096341/function-pointers-casting-in-c/1096349

### Casting Pointers to Numeric Values:

There's a data type defined to do this, uint_ptr.
It's special property is that if you turn a ptr into this type then convert it back it 
will always have the same value afterwards. This is portable. 

### Function Pointer Dtructs:

Fuse includes structs made solely of function pointers, with the struct holding 
the type of each function ptr; type def each relevant function and store it in one of these.

### Failure to send exec code to FLASH:
 Turns out the mmap function is one way only. You can't write to a mapped address, you can only read.

###  Calling Assembly functions:

The calls are always 132_r to a spot 4 bytes above the start of the address; the stuff in parens evaluates to a constant to it's lefr

### Setting Entry Symbols:

ENTRY(symbol)  added to the beginning of the script sets the header entry location to equal the symbol. The value put in the header in the offset of that symbol relative to the start of 
the text header.

### Locating the addresses of functions via functions and relative loads:

Its possible to create a function that returns it's own address regardless of it's current location in memory using relative loads and the program counter.

#### KEY: Function Loading to struct:
	Using the L32r relative location system above, it's possible to calculate the correct address of any function if you can call it. You can fill a table of function locations by calling a
	single function thats in the same text segment. Filling in the locations means you can call the subfunctions using the function table returned.

#### KEY: Adding Custom Header Info:
Adding a series of bytes to the .txt section so they can be found by referenceing offsets from entry.

### Linker Script Info:
 I'm looking for the information on creating byte sections
 http://web.mit.edu/rhel-doc/3/rhel-ld-en-3/scripts.html	

https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_chapter/ld_3.html


### Program Header Info:
 By adjusting the program header commands, the sections can be split up into logical blocks. With PHDRS specified, there will be two segments corresponding to the data/bss and text segments, in order

### IBM C elf interpreter
https://www.ibm.com/docs/en/zos/2.2.0?topic=file-example-relocating-addresses-within-elf

##E Finding the Location of a function ###
 Given a function found at 44 in in the right side symbol table in objdump which represents the first function in the text segment, the text segment itself will be located at that value 
 + 52 (the size of the elf header) -1

 ### Slides on Relocating stuff:
 http://web.cse.ohio-state.edu/~reeves.92/CSE2421au12/SlidesDay52.pdf

 ### Readable Section Descriptions

 https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/storage/spi_flash.
 
 ### Mapping from SPI flash
 
 html#_CPPv417esp_partition_get24esp_partition_iterator_t

 ### ESP IDF MMAP SOurce Code:
 https://github.com/espressif/esp-idf/blob/master/components/spi_flash/test/test_mmap.c


### The real thing:
 https://github.com/espressif/esp-idf/blob/master/components/spi_flash/flash_mmap.c

 ### Direct Manipulation of MMU Tables:

 https://www.esp32.com/viewtopic.php?f=12&t=4832
Note the spi_flash
rc from spi_flash_cache2phys(0x40800000) = 0x300000
rc from spi_flash_phys2cache(0x300000, inst) = 0x40800000


 ### Potential Complete Version Of the Project:
 https://github.com/embedded2014/elf-loader

 ### Forum with Examples; Someone asked about building  very similar system and these are the answers
 https://esp32.com/viewtopic.php?t=4769 

 ### -r On Linker script required to prevent l32r error:
Without including -r in the linker script command, ld will refuse to create a new file.
The error will be l32r which has to do with unknown relocations

#### Repo with a Load Module:
https://github.com/niicoooo/esp32-elfloader
Contains defines for all 45 of the xtensa elf relocation possibilities
loader.c has defintions for some of the relocations, starting at line 172 of loader.c


### Mentions c Code Running From a File Stored Onboard (ESP32 Alexa Demo):

https://www.youtube.com/watch?v=re-dSV_a0tM
This may be useful because it show some helper functions around 3:50 that,

### This is The Video Where he shows the Model from C being implemented:
https://www.youtube.com/watch?v=kZdIO82059E
tensor flow light xxd command will create the c program
# Seems likely that I may Need to Eventually Connect the heap to the dynamically loaded lib; If the  

### Writing Custom Malloc and Free Functions:
http://tharikasblogs.blogspot.com/p/how-to-write-your-own-malloc-and-free.html

#### Map Files?
-Wl,-Map,output.map
https://community.platformio.org/t/generate-a-map-file/1130/6

### More Linker Script Stuff (Might Be repeated above):
board_build.ldscript = /path/to/ldscript.ld
 https://github.com/espressif/esp-idf/blob/master/components/spi_flash/flash_mmap.c



# More On Memory Layouts:
https://docs.espressif.com/projects/esp-idf/en/release-v4.2/esp32/api-reference/system/mem_alloc.html

 ### Load Routine: Need Memory In the Correct physical Address space AND in the Correct  Virtual Address Space
    1. PSRAM Space allocated for both, data, text
     #Malloc_CAP_SPI_RAM
     3F80
    2. Sections mapped to data and exec busses
    3. Sections loaded into their memory slots
    4. Begin to Run code

    # There's a possibility that the exec and MALLOC_CAP_SPIRAM

# Better Forum On the PSRAM Functions:
https://forum.arduino.cc/t/help-me-out-to-create-partition-for-esp32-wroom-32d-8mb/683257/4
https://learn.upesy.com/en/programmation/psram.html
ps_malloc() 

# PS MAlloc:

https://thingpulse.com/esp32-how-to-use-psram/

#Himem API for PSRAM accesss:
https://github.com/espressif/esp-idf/tree/master/examples/system/himem

# ESP Performance:
https://www.esp32.com/viewtopic.php?t=8492

### Shortened MPU MMU Document from espressif: 
Page 87 is the Memory Management stuff, along with page 595, which is more detailed
https://www.espressif.com/sites/default/files/documentation/esp32_technical_reference_manual_en.pdf#mpummu

### Forum of professional ARM Peopke:
https://forum.pjrc.com/threads/67939-using-PSRAM-on-Teensy-4-1

They're talking about needing to disable write access in this area (Line 266 of this repo)

https://github.com/PaulStoffregen/cores/blob/9306571409b2fe3f508d1d5a9cf7cbfc9a1c0328/teensy4/startup.c#L266

### ESP32 SPI RAM Auto Configures in PlatformIO
https://community.platformio.org/t/esp32-wrover-platform-ram-size/3313/27

### Write your own Malloc
http://tharikasblogs.blogspot.com/p/how-to-write-your-own-malloc-and-free.html

### Infor On Low Level Cache and Virtual Memory Explained:
In context of accessing external ram as instruction memory
https://esp32.com/viewtopic.php?t=16193

#### Info on Virtual Filesystems in ESP32 and how they can be used
https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/storage/vfs.html

### Overlay manager advice:
https://www.keil.com/support/man/docs/armclang_intro/armclang_intro_pge1466157476779.htm

https://www.geeksforgeeks.org/overlays-in-memory-management/

https://www.google.com/search?q=overlay+methods+in+c&rlz=1C1CHBF_enUS917US917&oq=overlay+methods+in+c&aqs=chrome..69i57j33i22i29i30l9.4966j1j9&sourceid=chrome&ie=UTF-8

https://www.keil.com/support/man/docs/armclang_intro/armclang_intro_pge1466157476779.htm

https://www.tutorialspoint.com/inter_process_communication/inter_process_communication_overlaying_process_image.htm

https://forums.parallax.com/discussion/163970/overlay-code-with-gcc

https://www.microchip.com/forums/m26224.aspx


https://stackoverflow.com/questions/812717/is-there-any-reason-to-use-c-instead-of-c-for-embedded-development

### Setting the VMA
Updated .txt {
    to
.text  : {

    And that set the VMA to 1000
### Setting NOLOAD Option:

.text  : {

    This removes the relocation entries for the text section

    It  Also removes the "LOAD" flag from teh corresponding section header

### Relocation Options:
    Removed -r after the LMA and VMA stuff was assigned.
    It simply removed the relocation tables, added the program header which also moved the start of the sections farther down, so the text section no longer started at file offset 34
### objcopy dumping sections:
../../Linker_Experiments/esp_bin/xtensa-esp32-elf-objcopy.exe simple_lib_d_all_f --dump-section .text=test.txt

The was done with 

### Objcopy dumping sections and NOLOAD:
    Objecopy is currently running WITH AND WITHOUT -r specified and working with both .data and .text.  
    Using NOLOAD flag on .text seems to break the system however. 
    Command
     ../../Linker_Experiments/esp_bin/xtensa-esp32-elf-objcopy.exe simple_lib_d_all_f --dump-section .data=test.txt
     
     #### Remove Sections:
     -R

     ### Set Section Flags:

            --set-section-flags sectionpattern=flags
           Set the flags for any sections matching sectionpattern.  The
           flags argument is a comma separated string of flag names.
           The recognized names are alloc, contents, load, noload,
           readonly, code, data, rom, exclude, share, and debug.  You
           can set the contents flag for a section which does not have
           contents, but it is not meaningful to clear the contents flag
           of a section which does have contents--just remove the
           section instead.  Not all flags are meaningful for all object
           file formats.  In particular the share flag is only
           meaningful for COFF format files and not for ELF format
           files.
#### OVERLAY :
    Changes Section Flags again: Adds relocate for one thing
       CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
       From with no load (I Think)
        ALLOC, READONLY, CODE
        
        CONTENTS, ALLOC, LOAD, READONLY, CODE
        Things can be allocatable, loadable
        If it's allocatable, it needs memory but it doesn't need to be set up in flash
### OLD LINKER SCRIPT COMMENT:
	   /*
	   load_func_struct = . ;
	   start = load_func_struct ;
	   */
	   /*  the function we want to make the entry is assigned to "." and . represents the current address  The entry point is then set equal to the address of . which is now equal to the first address in the section. Since the text section is the only thing in the executable segment the starting function can be loacted by loading the header and finding the correct segment, or by calling the first bytes in the executable code file/segment */
	
	/* These Start and call things are the moset questionable. They're suppo*/
	
	/*call = . ;*/ 
	/*start = load_func_struct +56;*/
	/*start = call ;*/
	/*call;*/

	/* 8c +34 =10C *?
	/*c4-34 =8c;  offset - header size = LMA; Symbol table lists offset as VMA, which means to find the address after cutting, you need to subtract the LMA on segment table from the LMA listed in the symbol table. That gives you 8c -8c, which is zero */   

	/* SNip From Physical offset. R */
	
#### MEMORY:
    # Memory Commands with OVERLAY lead to 

MEMORY
  {
    rom (rx)  : ORIGIN = 0, LENGTH = 256K
    ram (!rx) : org = 0x40000000, l = 4M
	rom_fake (rx)  : ORIGIN = 0, LENGTH = 256K
  }

### Setting the memory to write to is extremely easy; Setting Load memory address and VMA for a ection would appear to place both in the same load address and the VMA 